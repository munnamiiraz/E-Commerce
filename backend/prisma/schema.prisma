generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum productStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  avatarUrl    String?
  cover        String?
  phone        String?
  address      String?
  points       Int            @default(0)
  totalOrders  Int            @default(0)
  totalReviews Int            @default(0)
  designation  String         @default("New User")

  orders        Order[]
  reviews       Review[]
  wishList      WishList[]
  notifications Notification[]

  createdAt    DateTime       @default(now())
}

model Seller {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  avatarUrl     String?
  cover         String?
  phone         String
  address       String
  rating        Float          @default(0)
  totalRevenue  Int            @default(0)
  totalOrders   Int            @default(0)
  totalProducts Int            @default(0)
  totalReviews  Int            @default(0)
  designation   String         @default("New Seller")
  description   String

  orders        Order[]
  products      Product[]
  reviews       Review[]
  notifications Notification[]

  createdAt     DateTime       @default(now())
}

model WishList {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([userId, productId]) // Prevent duplicate wishlist items
}

model Notification {
  id        String   @id @default(uuid())
  message   String?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?

  seller    Seller?  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId  String?
}


model Order {
  id          String        @id @default(uuid())

  orderedBy   User          @relation(fields: [orderedById], references: [id], onDelete: Cascade)
  orderedById String

  sendBy      Seller        @relation(fields: [sendById], references: [id], onDelete: Cascade)
  sendById    String

  product     Product       @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId   String

  quantity    Int
  price       Int

  status      productStatus @default(PROCESSING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deliveredAt DateTime?
  cancelledAt DateTime?
  shippedAt   DateTime?
  receivedAt  DateTime?
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String?      // cloudinary public_id
  filename  String?
  mimeType  String?
  size      Int?
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Specification {
  id        String   @id @default(cuid())
  key       String
  value     String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Product {
  id             String          @id @default(cuid())
  title          String
  description    String
  category       String
  originalPrice  Int
  discountPrice  Int
  quantity       Int
  
  // FIXED: Added seller relation
  seller         Seller          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId       String

  // FIXED: Added back-references
  images         ProductImage[]
  specifications Specification[]
  orders         Order[]
  reviews        Review[]
  wishList       WishList[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Review {
  id         String   @id @default(uuid())

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String

  author     User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId   String?

  seller     Seller?  @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId   String?

  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}